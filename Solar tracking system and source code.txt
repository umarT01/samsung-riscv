Solar tracking system

Introduction

A solar tracking system optimizes the positioning of solar panels to follow the sun's path throughout the day, enhancing energy efficiency. It uses sensors to detect sunlight intensity and adjust the panel's angle accordingly. There are single-axis and dual-axis trackers, with dual-axis providing more precise alignment. These systems significantly increase the amount of solar energy harvested compared to stationary panels. Despite higher initial costs, they offer greater long-term benefits by boosting energy output and reducing payback time.

Overview

A solar tracking system** is designed to improve the efficiency of solar panels by adjusting their orientation to follow the sun’s movement throughout the day. There are two primary types of tracking systems: **single-axis** and **dual-axis**. A **single-axis** tracker moves the panel on one axis, usually from east to west, while a **dual-axis** tracker adjusts both horizontally and vertically, allowing it to follow the sun more accurately. 

These systems rely on **light sensors** (often LDRs or photodiodes) to detect sunlight intensity, guiding the motors that adjust the panel's angle. By tracking the sun, solar panels can absorb more sunlight, leading to a significant increase in energy output—typically between 25% to 35% more than fixed panels. 

Solar trackers are particularly useful in locations where maximum energy efficiency is needed. However, they come with a higher initial cost and require additional maintenance. Despite these drawbacks, they are becoming increasingly popular for large-scale solar farms and residential installations where the long-term energy savings justify the investment.


working in brief

A solar tracking system adjusts the position of solar panels to follow the sun's movement throughout the day, ensuring they capture the maximum amount of sunlight. It typically uses light sensors (like LDRs) to detect the intensity of sunlight from different directions. When one side of the panel receives more light, the system moves the panel towards that direction.

In single-axis systems, the panels move east to west, while in dual-axis systems, the panels can move in both horizontal and vertical axes for more precise tracking. The system uses motors and gears to adjust the panel’s angle based on sensor data. This tracking increases the energy capture by 25% to 35% compared to stationary panels.

The adjustments are usually made throughout the day, following the sun's path from sunrise to sunset. The system reduces the energy loss due to the angle of incidence of light, improving the overall performance of the solar panels. However, the initial investment and maintenance are higher than static solar panels.


LIST OF COMPONENTS REQUIRED

CH32V003X (VSD SQUADRON MINI MICROCONTROLLER)
SERVO MOTOR 90G
LDR SENSOR (TWO)
SOLAR PANEL (7V)
LITHIUM BATTERY (7V) 
STEP DOWN BUCK CONVERTOR (TO REDUCE VOLTAGE)
LED LIGHT


source code for solar tracking system

#include <ch32v00x.h>  // Include CH32V003X microcontroller specific header
#include <stdio.h>
#include <stdlib.h> // Include standard library for abs() function

// LDR sensor pins (PA1 and PA2)
#define LDR_LEFT_PIN  GPIO_Pin_1   // PA1
#define LDR_RIGHT_PIN GPIO_Pin_2   // PA2

// Servo motor PWM pin (PD2)
#define SERVO_PWM_PIN GPIO_Pin_2

// Servo motor PWM parameters
#define SERVO_PWM_PERIOD 20000 // 20 ms period (50 Hz frequency)
#define SERVO_PWM_PULSE_MIN 1000 // 1 ms pulse (0 degrees)
#define SERVO_PWM_PULSE_MAX 2000 // 2 ms pulse (180 degrees)

// Error threshold for sensor comparison
#define ERROR_THRESHOLD 10

// Function prototypes
void GPIO_Config(void);
void ADC_Config(void);
void TIM1_PWMOut_Init(uint16_t pulseWidth);
void Set_Servo_Angle(uint16_t angle);
uint16_t Read_LDR(uint8_t pin);
void My_Delay_Ms(uint32_t n); // Renamed delay function

// Main program for Solar Tracking
int main(void) {
    // Initialize system
    SystemCoreClockUpdate();
    GPIO_Config();
    ADC_Config();

    // Initialize servo motor to 90 degrees (neutral position)
    Set_Servo_Angle(90);
    while (1) {
        // Read LDR sensor values (left and right)
        uint16_t ldrLeft = Read_LDR(LDR_LEFT_PIN);
        uint16_t ldrRight = Read_LDR(LDR_RIGHT_PIN);

        // Calculate the difference between the left and right LDR values
        int valueLeftRight = abs(ldrLeft - ldrRight);

        // If difference exceeds error threshold, adjust servo position
        if (valueLeftRight > ERROR_THRESHOLD) {
            if (ldrLeft > ldrRight) {
                // Turn left (servo 90 degrees left)
                Set_Servo_Angle(0);
            } else {
                // Turn right (servo 90 degrees right)
                Set_Servo_Angle(180);
            }
        } else {
            // Light is balanced, keep servo at 90 degrees
            Set_Servo_Angle(90);
        }

        // Short delay before checking the sensors again
        My_Delay_Ms(100);
    }
}

// GPIO configuration for LDR and Servo motor PWM pin
void GPIO_Config(void) {
    GPIO_InitTypeDef GPIO_InitStructure = {0};

    // Enable GPIO clocks
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOD, ENABLE);

    // Configure LDR input pins (PA1 and PA2)
    GPIO_InitStructure.GPIO_Pin = LDR_LEFT_PIN | LDR_RIGHT_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;  // Analog Input
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure servo PWM pin (PD2)
    GPIO_InitStructure.GPIO_Pin = SERVO_PWM_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function Push-Pull
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
}

// ADC configuration to read analog LDR sensor values
void ADC_Config(void) {
    ADC_InitTypeDef ADC_InitStructure = {0};

    // Enable ADC1 clock
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);

    // ADC1 configuration
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfChannel = 1; // Single channel
    ADC_Init(ADC1, &ADC_InitStructure);

    // Enable ADC1
    ADC_Cmd(ADC1, ENABLE);
    // ADC1 calibration
    ADC_ResetCalibration(ADC1);
    while (ADC_GetResetCalibrationStatus(ADC1));
    ADC_StartCalibration(ADC1);
    while (ADC_GetCalibrationStatus(ADC1));
}

// Function to initialize PWM for servo motor
void TIM1_PWMOut_Init(uint16_t pulseWidth) {
    TIM_OCInitTypeDef TIM_OCInitStructure = {0};
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure = {0};

    // Enable Timer 1 clock
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

    // Configure Timer 1 for PWM
    TIM_TimeBaseInitStructure.TIM_Period = SERVO_PWM_PERIOD - 1; // 20 ms period
    TIM_TimeBaseInitStructure.TIM_Prescaler = (SystemCoreClock / 1000000) - 1; // 1 MHz clock
    TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStructure);

    // Configure PWM mode
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Pulse = pulseWidth; // Set pulse width
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OC1Init(TIM1, &TIM_OCInitStructure);

    // Enable PWM outputs
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
    TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
    TIM_ARRPreloadConfig(TIM1, ENABLE);
    TIM_Cmd(TIM1, ENABLE);
}

// Function to set servo motor angle
void Set_Servo_Angle(uint16_t angle) {
    // Map angle (0-180 degrees) to pulse width (1000-2000 us)
    uint16_t pulseWidth = SERVO_PWM_PULSE_MIN + (angle * (SERVO_PWM_PULSE_MAX - SERVO_PWM_PULSE_MIN) / 180);
    TIM1_PWMOut_Init(pulseWidth);
    My_Delay_Ms(500); // Wait for servo to reach the desired position
}

// Function to read the LDR sensor values (analog reading)
uint16_t Read_LDR(uint8_t pin) {
    ADC_RegularChannelConfig(ADC1, pin, 1, ADC_SampleTime_15Cycles);  // Use 15 cycles sampling time
    ADC_SoftwareStartConvCmd(ADC1, ENABLE);
    while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)); // Wait for conversion to complete
    return ADC_GetConversionValue(ADC1);
}

// Simple delay function in milliseconds
void My_Delay_Ms(uint32_t n) {
    volatile uint32_t i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < 1000; j++) {
            // Just wasting time (simple delay loop)
        }
    }
}
